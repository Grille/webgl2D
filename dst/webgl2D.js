function webGL2DStart(r){var a={gl:null,shaderProgram:null,vertexPosition:[],vertexTextureCoord:[],vertexColor:[],vertexIndex:[],textureList:[],vertexPositionBuffer:null,vertexTextureCoordBuffer:null,vertexColorBuffer:null,vertexIndexBuffer:null,IndexOffset:0,bufferOffset:0,lastTexture:null,textureContinuous:[],textureOffset:0,useMatrixResult:new Float32Array(2E3),curOffset:0,textureCounter:0,translate:[0,0],scale:[1,1],angle:0,sin:0,cos:0,drawImageDst:new Int32Array(4),compileShader:function(b,e){var c=
  a.gl,f=c.createShader(c.FRAGMENT_SHADER),l=c.createShader(c.VERTEX_SHADER);c.shaderSource(l,b);c.compileShader(l);c.shaderSource(f,e);c.compileShader(f);var g=c.createProgram();c.attachShader(g,l);c.attachShader(g,f);c.linkProgram(g);c.getProgramParameter(g,c.LINK_STATUS)||alert("Could not initialise shaders");g.vertexPositionAttribute=c.getAttribLocation(g,"aVertexPosition");c.enableVertexAttribArray(g.vertexPositionAttribute);g.textureCoordAttribute=c.getAttribLocation(g,"aTextureCoord");c.enableVertexAttribArray(g.textureCoordAttribute);
  g.vertexColorAttribute=c.getAttribLocation(g,"aVertexColor");c.enableVertexAttribArray(g.vertexColorAttribute);g.samplerUniform=c.getUniformLocation(g,"uSampler");return g},useShader:function(b){n.useProgram(b);a.shaderProgram=b},pow:function(a){if(16>=a)return 16;if(32>=a)return 32;if(64>=a)return 64;if(128>=a)return 128;if(256>=a)return 256;if(512>=a)return 512;if(1024>=a)return 1024;if(2048>=a)return 2048;if(4096>=a)return 4096;if(8192>=a)return 8192},textureFromImage:function(b){var e=a.gl;var c=
  e.createTexture();var f=document.createElement("canvas"),l=f.getContext("2d");l.imageSmoothingEnabled=!1;l.mozImageSmoothingEnabled=!1;f.width=a.pow(b.width);f.height=a.pow(b.height);l.drawImage(b,0,0,b.width,b.height);e.bindTexture(e.TEXTURE_2D,c);e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,f);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST);e.bindTexture(e.TEXTURE_2D,null);c.width=f.width;c.height=f.height;c.imgwidth=
  b.width;c.imgheight=b.height;c.index=a.textureCounter;a.textureCounter++;return c},textureFromFile:function(b){var e=a.gl;var c=e.createTexture();c.image=new Image;c.image.onload=function(){var b=document.createElement("canvas"),l=b.getContext("2d");l.imageSmoothingEnabled=!1;l.mozImageSmoothingEnabled=!1;b.width=a.pow(c.image.width);b.height=a.pow(c.image.height);l.drawImage(c.image,0,0,c.image.width,c.image.height);e.bindTexture(e.TEXTURE_2D,c);e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,
  b);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST);e.bindTexture(e.TEXTURE_2D,null);c.width=b.width;c.height=b.height;c.imgwidth=c.image.width;c.imgheight=c.image.height;c.index=a.textureCounter;a.textureCounter++};c.image.src=b;return c},textureFromPixelArray:function(b,e,c){var f=a.gl,l=f.RGB,g=f.createTexture();f.bindTexture(f.TEXTURE_2D,g);f.texImage2D(f.TEXTURE_2D,0,l,e,c,0,l,f.UNSIGNED_BYTE,b);f.texParameteri(f.TEXTURE_2D,
  f.TEXTURE_WRAP_S,f.CLAMP_TO_EDGE);f.texParameteri(f.TEXTURE_2D,f.TEXTURE_WRAP_T,f.CLAMP_TO_EDGE);f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MAG_FILTER,f.NEAREST);f.texParameteri(f.TEXTURE_2D,f.TEXTURE_MIN_FILTER,f.NEAREST);f.generateMipmap(f.TEXTURE_2D);f.bindTexture(f.TEXTURE_2D,null);g.width=e;g.height=c;g.imgwidth=e;g.imgheight=c;g.index=a.textureCounter;a.textureCounter++;return g},textureFromString:function(b,e,c){b=a.gl;e=b.createTexture();c=document.createElement("canvas");var f=c.getContext("2d");
  f.imageSmoothingEnabled=!1;f.mozImageSmoothingEnabled=!1;c.width=a.pow(512);c.height=a.pow(512);f.t;f.drawImage(image,0,0,image.width,image.height);b.bindTexture(b.TEXTURE_2D,e);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,b.RGBA,b.UNSIGNED_BYTE,c);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.bindTexture(b.TEXTURE_2D,null);e.width=c.width;e.height=c.height;e.imgwidth=image.width;e.imgheight=image.height;e.index=a.textureCounter;
  a.textureCounter++;return e},startScene:function(){a.gl.viewport(0,0,n.canvas.width,n.canvas.height);a.gl.clear(n.COLOR_BUFFER_BIT);a.IndexOffset=0;a.bufferOffset=0;a.lastTexture=null;a.textureOffset=-1},drawTriangle:function(b,e,c,f){for(var l=a.IndexOffset,g=a.bufferOffset,h=[],m=0;12>m;m++)h[m]=f[m]/255;c=a.useMatrix(c);f=b.width;m=b.height;var d=2*g;a.vertexPosition[d+0]=c[0];a.vertexPosition[d+1]=c[1];a.vertexPosition[d+2]=c[2];a.vertexPosition[d+3]=c[3];a.vertexPosition[d+4]=c[4];a.vertexPosition[d+
  5]=c[5];d=2*g;a.vertexTextureCoord[d+0]=e[0]/f;a.vertexTextureCoord[d+1]=e[1]/m;a.vertexTextureCoord[d+2]=e[2]/f;a.vertexTextureCoord[d+3]=e[3]/m;a.vertexTextureCoord[d+4]=e[4]/f;a.vertexTextureCoord[d+5]=e[5]/m;d=4*g;a.vertexColor[d+0]=h[0];a.vertexColor[d+1]=h[1];a.vertexColor[d+2]=h[2];a.vertexColor[d+3]=h[3];a.vertexColor[d+4]=h[4];a.vertexColor[d+5]=h[5];a.vertexColor[d+6]=h[6];a.vertexColor[d+7]=h[7];a.vertexColor[d+8]=h[8];a.vertexColor[d+9]=h[9];a.vertexColor[d+10]=h[10];a.vertexColor[d+11]=
  h[11];a.vertexIndex[3*l+0]=g+0;a.vertexIndex[3*l+1]=g+1;a.vertexIndex[3*l+2]=g+2;b!=a.lastTexture&&(a.textureOffset++,a.lastTexture=b,a.textureList[a.textureOffset]=b,a.textureContinuous[a.textureOffset]=0);a.textureContinuous[a.textureOffset]+=1;a.IndexOffset+=1;a.bufferOffset+=3},drawTriangleFan:function(b,e,c,f){for(var l=a.IndexOffset,g=a.bufferOffset,h=c.length/2,m=[],d=0;d<4*h;d++)m[d]=f[d]/255;c=a.useMatrix(c);f=b.width;d=b.height;for(var k=2*g,n=2*g,q=4*g,p=0;p<h;p++)a.vertexPosition[k+0+
  2*p]=c[0+2*p],a.vertexPosition[k+1+2*p]=c[1+2*p],a.vertexTextureCoord[n+0+2*p]=e[0+2*p]/f,a.vertexTextureCoord[n+1+2*p]=e[1+2*p]/d,a.vertexColor[q+0+4*p]=m[0+4*p],a.vertexColor[q+1+4*p]=m[1+4*p],a.vertexColor[q+2+4*p]=m[2+4*p],a.vertexColor[q+3+4*p]=m[3+4*p];for(e=0;e<h-2;e++)a.vertexIndex[3*l+0+3*e]=g+0,a.vertexIndex[3*l+1+3*e]=g+1+e,a.vertexIndex[3*l+2+3*e]=g+2+e;b!=a.lastTexture&&(a.textureOffset++,a.lastTexture=b,a.textureList[a.textureOffset]=b,a.textureContinuous[a.textureOffset]=0);a.textureContinuous[a.textureOffset]+=
  h-2;a.IndexOffset+=h-2;a.bufferOffset+=h},drawSquare:function(b,e,c,f){for(var l=a.IndexOffset,g=a.bufferOffset,h=[],m=0;16>m;m++)h[m]=f[m]/255;c=a.useMatrix(c);f=b.width;m=b.height;var d=2*g;a.vertexPosition[d+0]=c[0];a.vertexPosition[d+1]=c[1];a.vertexPosition[d+2]=c[2];a.vertexPosition[d+3]=c[3];a.vertexPosition[d+4]=c[4];a.vertexPosition[d+5]=c[5];a.vertexPosition[d+6]=c[6];a.vertexPosition[d+7]=c[7];a.vertexPosition[d+8]=.25*(c[0]+c[2]+c[4]+c[6]);a.vertexPosition[d+9]=.25*(c[1]+c[3]+c[5]+c[7]);
  d=2*g;a.vertexTextureCoord[d+0]=e[0]/f;a.vertexTextureCoord[d+1]=e[1]/m;a.vertexTextureCoord[d+2]=e[2]/f;a.vertexTextureCoord[d+3]=e[3]/m;a.vertexTextureCoord[d+4]=e[4]/f;a.vertexTextureCoord[d+5]=e[5]/m;a.vertexTextureCoord[d+6]=e[6]/f;a.vertexTextureCoord[d+7]=e[7]/m;a.vertexTextureCoord[d+8]=.25*(a.vertexTextureCoord[d+0]+a.vertexTextureCoord[d+2]+a.vertexTextureCoord[d+4]+a.vertexTextureCoord[d+6]);a.vertexTextureCoord[d+9]=.25*(a.vertexTextureCoord[d+1]+a.vertexTextureCoord[d+3]+a.vertexTextureCoord[d+
  5]+a.vertexTextureCoord[d+7]);d=4*g;a.vertexColor[d+0]=h[0];a.vertexColor[d+1]=h[1];a.vertexColor[d+2]=h[2];a.vertexColor[d+3]=h[3];a.vertexColor[d+4]=h[4];a.vertexColor[d+5]=h[5];a.vertexColor[d+6]=h[6];a.vertexColor[d+7]=h[7];a.vertexColor[d+8]=h[8];a.vertexColor[d+9]=h[9];a.vertexColor[d+10]=h[10];a.vertexColor[d+11]=h[11];a.vertexColor[d+12]=h[12];a.vertexColor[d+13]=h[13];a.vertexColor[d+14]=h[14];a.vertexColor[d+15]=h[15];a.vertexColor[d+16]=.25*(h[0]+h[4]+h[8]+h[12]);a.vertexColor[d+17]=.25*
  (h[1]+h[5]+h[9]+h[13]);a.vertexColor[d+18]=.25*(h[2]+h[6]+h[10]+h[14]);a.vertexColor[d+19]=.25*(h[3]+h[7]+h[11]+h[15]);d=3*l;a.vertexIndex[d+0]=g+0;a.vertexIndex[d+1]=g+1;a.vertexIndex[d+2]=g+4;a.vertexIndex[d+3]=g+1;a.vertexIndex[d+4]=g+2;a.vertexIndex[d+5]=g+4;a.vertexIndex[d+6]=g+2;a.vertexIndex[d+7]=g+3;a.vertexIndex[d+8]=g+4;a.vertexIndex[d+9]=g+3;a.vertexIndex[d+10]=g+0;a.vertexIndex[d+11]=g+4;b!=a.lastTexture&&(a.textureOffset++,a.lastTexture=b,a.textureList[a.textureOffset]=b,a.textureContinuous[a.textureOffset]=
  0);a.textureContinuous[a.textureOffset]+=4;a.IndexOffset+=4;a.bufferOffset+=5},drawImage:function(b,e,c,f){var l=a.IndexOffset,g=a.bufferOffset;f=[f[0]/255,f[1]/255,f[2]/255,f[3]/255];var h=c[0],m=c[2]+c[0],d=c[1];c=c[3]+c[1];c=a.useMatrix([h,c,m,c,m,d,h,d]);m=b.width;var k=b.height;h=e[0]/m;m=(e[0]+e[2])/m;d=e[1]/k;e=(e[1]+e[3])/k;k=2*g;a.vertexPosition[k+0]=c[0];a.vertexPosition[k+1]=c[1];a.vertexPosition[k+2]=c[2];a.vertexPosition[k+3]=c[3];a.vertexPosition[k+4]=c[4];a.vertexPosition[k+5]=c[5];
  a.vertexPosition[k+6]=c[6];a.vertexPosition[k+7]=c[7];k=2*g;a.vertexTextureCoord[k+0]=h;a.vertexTextureCoord[k+1]=e;a.vertexTextureCoord[k+2]=m;a.vertexTextureCoord[k+3]=e;a.vertexTextureCoord[k+4]=m;a.vertexTextureCoord[k+5]=d;a.vertexTextureCoord[k+6]=h;a.vertexTextureCoord[k+7]=d;k=4*g;a.vertexColor[k+0]=a.vertexColor[k+4]=a.vertexColor[k+8]=a.vertexColor[k+12]=f[0];a.vertexColor[k+1]=a.vertexColor[k+5]=a.vertexColor[k+9]=a.vertexColor[k+13]=f[1];a.vertexColor[k+2]=a.vertexColor[k+6]=a.vertexColor[k+
  10]=a.vertexColor[k+14]=f[2];a.vertexColor[k+3]=a.vertexColor[k+7]=a.vertexColor[k+11]=a.vertexColor[k+15]=f[3];k=3*l;a.vertexIndex[k+0]=g+0;a.vertexIndex[k+1]=g+1;a.vertexIndex[k+2]=g+2;a.vertexIndex[k+3]=g+0;a.vertexIndex[k+4]=g+2;a.vertexIndex[k+5]=g+3;b!=a.lastTexture&&(a.textureOffset++,a.lastTexture=b,a.textureList[a.textureOffset]=b,a.textureContinuous[a.textureOffset]=0);a.textureContinuous[a.textureOffset]+=2;a.IndexOffset+=2;a.bufferOffset+=4},endScene:function(){var b=a.gl;b.bindBuffer(b.ARRAY_BUFFER,
  a.vertexPositionBuffer);b.bufferData(b.ARRAY_BUFFER,a.vertexPosition,b.DYNAMIC_DRAW);b.vertexAttribPointer(a.shaderProgram.vertexPositionAttribute,2,b.FLOAT,!1,0,0);b.bindBuffer(b.ARRAY_BUFFER,a.vertexColorBuffer);b.bufferData(b.ARRAY_BUFFER,a.vertexColor,b.DYNAMIC_DRAW);b.vertexAttribPointer(a.shaderProgram.vertexColorAttribute,4,b.FLOAT,!1,0,0);b.bindBuffer(b.ARRAY_BUFFER,a.vertexTextureCoordBuffer);b.bufferData(b.ARRAY_BUFFER,a.vertexTextureCoord,b.DYNAMIC_DRAW);b.vertexAttribPointer(a.shaderProgram.textureCoordAttribute,
  2,b.FLOAT,!1,0,0);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,a.vertexIndexBuffer);b.bufferData(b.ELEMENT_ARRAY_BUFFER,a.vertexIndex,b.DYNAMIC_DRAW)},renderScene:function(){for(var b=a.gl,e=0,c=0,f;e<=a.textureOffset;)f=a.textureContinuous[e],b.activeTexture(b.TEXTURE0),b.bindTexture(b.TEXTURE_2D,a.textureList[e]),b.drawElements(b.TRIANGLES,3*f,b.UNSIGNED_SHORT,6*c),c+=f,e++},useMatrix:function(b){var e=a.gl,c=a.translate,f=a.scale,l=a.sin,g=a.cos,h=.5*e.viewportWidth;e=.5*e.viewportHeight;var m=b.length;
  if(!1===!(0===l&&1===g))for(l=0;l<m;l+=2)a.useMatrixResult[l+0]=-1+(b[l]+c[0])*f[0]/h,a.useMatrixResult[l+1]=1-(b[l+1]+c[1])*f[1]/e;else for(var d=0;d<m;d+=2)a.useMatrixResult[d+0]=-1+(b[d]*f[0]*g-b[d+1]*f[1]*l+c[0])/h,a.useMatrixResult[d+1]=1-(b[d+1]*f[1]*g+b[d]*f[0]*l+c[1])/e;return a.useMatrixResult},matrix:{setTranslate:function(b,e){a.translate=[b,e]},addTranslate:function(b,e){a.translate[0]+=b;a.translate[1]+=e},setScale:function(b,e){a.scale=[b,e]},addScale:function(b,e){a.scale[0]+=b;a.scale[1]+=
  e},setRotate:function(b){a.angle=b;a.sin=Math.sin(3.14159265*a.angle/180);a.cos=Math.cos(3.14159265*a.angle/180)},addRotate:function(b){a.angle+=b;a.sin=Math.sin(3.14159265*a.angle/180);a.cos=Math.cos(3.14159265*a.angle/180)},reset:function(){a.translate=[0,0];a.scale=[1,1];a.angle=0;a.sin=Math.sin(3.14159265*a.angle/180);a.cos=Math.cos(3.14159265*a.angle/180)},save:function(){return[a.translate,a.scale,a.angle]},load:function(b){a.translate=b[0];a.scale=b[1];a.angle=b[2];a.sin=Math.sin(3.14159265*
  a.angle/180);a.cos=Math.cos(3.14159265*a.angle/180)}}};a.gl=r.getContext("webgl",{antialias:!1,depth:!1});var n=a.gl;a.vertexPositionBuffer=n.createBuffer();a.vertexColorBuffer=n.createBuffer();a.vertexTextureCoordBuffer=n.createBuffer();a.vertexIndexBuffer=n.createBuffer();n.viewportWidth=r.width;n.viewportHeight=r.height;a.vertexPosition=new Float32Array(8E4);a.vertexTextureCoord=new Float32Array(8E4);a.vertexColor=new Float32Array(16E4);a.vertexIndex=new Uint16Array(6E4);a.textureList=[];a.textureContinuous=
  [];a.useShader(a.compileShader("\n      attribute vec2 aVertexPosition;\n      attribute vec2 aTextureCoord;\n      attribute vec4 aVertexColor;\n\n      varying vec2 vTextureCoord;\n      varying vec4 vColor;\n\n      void main(void) {\n          gl_Position = vec4(aVertexPosition.x, aVertexPosition.y, 0.0, 1.0);\n          vTextureCoord = aTextureCoord;\n          vColor = aVertexColor;\n      }\n      ","\n      precision mediump float;\n\n      varying vec2 vTextureCoord;\n      varying vec4 vColor;\n\n      uniform sampler2D uSampler;\n\n      void main(void) {\n        gl_FragColor = vec4(texture2D(uSampler, vTextureCoord) * vColor);\n      }\n      "));
  n.disable(n.DEPTH_TEST);n.blendFunc(n.SRC_ALPHA,n.ONE_MINUS_SRC_ALPHA);n.enable(n.BLEND);a.nullTexture=a.textureFromPixelArray(new Uint8Array([255,255,255]),1,1);return a};